devtools::test()
devtools::build()
devtools::install()
library(ucdp.api)
ucdp.api::getUcdpData("gedevents", version = "22.1", pagesize = 1000)
ucdp.api::getUcdpData("nonstate", version = "22.1", pagesize = 1000)
#' @param pagesize Page size of each individual query. Default: 100. Max: 1000
#' The UCDP API divides dataset into N pages of size S,
#' the query loops over all pages until full dataset is retrieved.
#'
#' @return data.frame with requested UCDP dataset
#' @export
#'
#' @examples
#' getUCDPData(dataset = ucdpprioconflict, version = "22.1", pagesize = 100)
#' getUCDPData(dataset = gedevents, version = "22.1", pagesize = 100)
getUcdpData <- function(dataset, version, pagesize = 100){
## Stop if requested pagesize greater than 1000
if(pagesize > 1000){
stop("Page size cannot exceed 1000")
}
## Check if dataset name is valid
dataset.names <- c("ucdpprioconflict", "battledeaths", "dyadic", "nonstate",
"onesided", "gedevents")
dataset.string <- paste(paste0("'", dataset.names, "'"), collapse = ", ")
if(!dataset %in% dataset.names){
stop(sprintf("dataset name needs to be one of the following:\n%s",
dataset.string))
}
## Build initial URL: Insert dataset number, version and pagesize
url <- sprintf("https://ucdpapi.pcr.uu.se/api/%s/%s?pagesize=%s",
dataset, version, pagesize)
## Check if URL is valid
pingUrl(url)
## Get initial response and content
response <- httr::GET(url)
content.ls <- httr::content(response, encoding = "UTF-8")
outdata.ls <- content.ls$Result
## Get total number of pages needed to retrieve complete dataset
pages <- content.ls$TotalPages
## Get url of next page
nxt.url <- content.ls$NextPageUrl
## Loop over remaining pages and append results
## Stops if NextPageUrl does not exist (empty string)
while(content.ls$NextPageUrl != ""){
## Get content of next page
response <- httr::GET(content.ls$NextPageUrl)
content.ls <- httr::content(response, encoding = "UTF-8")
## Append content from next page to content from previous n pages
outdata.ls <- c(outdata.ls, content.ls$Result)
}
## Output results as dataframe
outdata.df <- dplyr::bind_rows(lapply(outdata.ls, unlist))
## Convert true numeric character columns to numeric
## ... Function to identify numeric columns
isNumeric <- function(x){
all(suppressWarnings(!is.na(as.numeric(na.omit(x)))))
}
## ... Apply function to all columns (only converts true numeric columns)
outdata.df <- dplyr::mutate_if(outdata.df, isNumeric, as.numeric)
## Return output dataframe
return(outdata.df)
}
#' @param pagesize Page size of each individual query. Default: 100. Max: 1000
#' The UCDP API divides dataset into N pages of size S,
#' the query loops over all pages until full dataset is retrieved.
#'
#' @return data.frame with requested UCDP dataset
#' @export
#'
#' @examples
#' getUCDPData(dataset = ucdpprioconflict, version = "22.1", pagesize = 100)
#' getUCDPData(dataset = gedevents, version = "22.1", pagesize = 100)
getUcdpData <- function(dataset, version, pagesize = 100){
## Stop if requested pagesize greater than 1000
if(pagesize > 1000){
stop("Page size cannot exceed 1000")
}
## Check if dataset name is valid
dataset.names <- c("ucdpprioconflict", "battledeaths", "dyadic", "nonstate",
"onesided", "gedevents")
dataset.string <- paste(paste0("'", dataset.names, "'"), collapse = ", ")
if(!dataset %in% dataset.names){
stop(sprintf("dataset name needs to be one of the following:\n%s",
dataset.string))
}
## Build initial URL: Insert dataset number, version and pagesize
url <- sprintf("https://ucdpapi.pcr.uu.se/api/%s/%s?pagesize=%s",
dataset, version, pagesize)
## Check if URL is valid
pingUrl(url)
## Get initial response and content
response <- httr::GET(url)
content.ls <- httr::content(response, encoding = "UTF-8")
outdata.ls <- content.ls$Result
## Get total number of pages needed to retrieve complete dataset
pages <- content.ls$TotalPages
## Get url of next page
nxt.url <- content.ls$NextPageUrl
## Loop over remaining pages and append results
## Stops if NextPageUrl does not exist (empty string)
while(content.ls$NextPageUrl != ""){
## Get content of next page
response <- httr::GET(content.ls$NextPageUrl)
content.ls <- httr::content(response, encoding = "UTF-8")
## Append content from next page to content from previous n pages
outdata.ls <- c(outdata.ls, content.ls$Result)
}
## Output results as dataframe
outdata.df <- dplyr::bind_rows(lapply(outdata.ls, unlist))
## Convert true numeric character columns to numeric
## ... Function to identify numeric columns
isNumeric <- function(x){
all(suppressWarnings(!is.na(as.numeric(na.omit(x)))))
}
## ... Apply function to all columns (only converts true numeric columns)
outdata.df <- dplyr::mutate_if(outdata.df, isNumeric, as.numeric)
## Return output dataframe
return(outdata.df)
}
#' @param pagesize Page size of each individual query. Default: 100. Max: 1000
#' The UCDP API divides dataset into N pages of size S,
#' the query loops over all pages until full dataset is retrieved.
#'
#' @return data.frame with requested UCDP dataset
#' @export
#'
#' @examples
#' getUCDPData(dataset = ucdpprioconflict, version = "22.1", pagesize = 100)
#' getUCDPData(dataset = gedevents, version = "22.1", pagesize = 100)
getUcdpData <- function(dataset, version, pagesize = 100){
## Stop if requested pagesize greater than 1000
if(pagesize > 1000){
stop("Page size cannot exceed 1000")
}
## Check if dataset name is valid
dataset.names <- c("ucdpprioconflict", "battledeaths", "dyadic", "nonstate",
"onesided", "gedevents")
dataset.string <- paste(paste0("'", dataset.names, "'"), collapse = ", ")
if(!dataset %in% dataset.names){
stop(sprintf("dataset name needs to be one of the following:\n%s",
dataset.string))
}
## Build initial URL: Insert dataset number, version and pagesize
url <- sprintf("https://ucdpapi.pcr.uu.se/api/%s/%s?pagesize=%s",
dataset, version, pagesize)
## Check if URL is valid
pingUrl(url)
## Get initial response and content
response <- httr::GET(url)
content.ls <- httr::content(response, encoding = "UTF-8")
outdata.ls <- content.ls$Result
## Get total number of pages needed to retrieve complete dataset
pages <- content.ls$TotalPages
## Get url of next page
nxt.url <- content.ls$NextPageUrl
## Loop over remaining pages and append results
## Stops if NextPageUrl does not exist (empty string)
while(content.ls$NextPageUrl != ""){
## Get content of next page
response <- httr::GET(content.ls$NextPageUrl)
content.ls <- httr::content(response, encoding = "UTF-8")
## Append content from next page to content from previous n pages
outdata.ls <- c(outdata.ls, content.ls$Result)
}
## Output results as dataframe
outdata.df <- dplyr::bind_rows(lapply(outdata.ls, unlist))
## Convert true numeric character columns to numeric
## ... Function to identify numeric columns
isNumeric <- function(x){
all(suppressWarnings(!is.na(as.numeric(na.omit(x)))))
}
## ... Apply function to all columns (only converts true numeric columns)
outdata.df <- dplyr::mutate_if(outdata.df, isNumeric, as.numeric)
## Return output dataframe
return(outdata.df)
}
test <- ucdp.api::getUcdpData("nonstate", "21.1")
#' @param pagesize Page size of each individual query. Default: 100. Max: 1000
#' The UCDP API divides dataset into N pages of size S,
#' the query loops over all pages until full dataset is retrieved.
#'
#' @return data.frame with requested UCDP dataset
#' @export
#'
#' @examples
#' getUCDPData(dataset = ucdpprioconflict, version = "22.1", pagesize = 100)
#' getUCDPData(dataset = gedevents, version = "22.1", pagesize = 100)
getUcdpData <- function(dataset, version, pagesize = 100){
## Stop if requested pagesize greater than 1000
if(pagesize > 1000){
stop("Page size cannot exceed 1000")
}
## Check if dataset name is valid
dataset.names <- c("ucdpprioconflict", "battledeaths", "dyadic", "nonstate",
"onesided", "gedevents")
dataset.string <- paste(paste0("'", dataset.names, "'"), collapse = ", ")
if(!dataset %in% dataset.names){
stop(sprintf("dataset name needs to be one of the following:\n%s",
dataset.string))
}
## Build initial URL: Insert dataset number, version and pagesize
url <- sprintf("https://ucdpapi.pcr.uu.se/api/%s/%s?pagesize=%s",
dataset, version, pagesize)
## Check if URL is valid
pingUrl(url)
## Get initial response and content
response <- httr::GET(url)
content.ls <- httr::content(response, encoding = "UTF-8")
outdata.ls <- content.ls$Result
## Get total number of pages needed to retrieve complete dataset
pages <- content.ls$TotalPages
## Get url of next page
nxt.url <- content.ls$NextPageUrl
## Loop over remaining pages and append results
## Stops if NextPageUrl does not exist (empty string)
while(content.ls$NextPageUrl != ""){
## Get content of next page
response <- httr::GET(content.ls$NextPageUrl)
content.ls <- httr::content(response, encoding = "UTF-8")
## Append content from next page to content from previous n pages
outdata.ls <- c(outdata.ls, content.ls$Result)
}
## Output results as dataframe
outdata.df <- dplyr::bind_rows(lapply(outdata.ls, unlist))
## Convert true numeric character columns to numeric
## ... Function to identify numeric columns
isNumeric <- function(x){
all(suppressWarnings(!is.na(as.numeric(na.omit(x)))))
}
## ... Apply function to all columns (only converts true numeric columns)
outdata.df <- dplyr::mutate_if(outdata.df, isNumeric, as.numeric)
## Return output dataframe
return(outdata.df)
}
test <- ucdp.api::getUcdpData("nonstate", "21.1")
test <- getUcdpData("nonstate", "21.1")
#' pingUrl: Check if URL is valid and can be accessed
#'
#' @param url character. URL of website to be accessed
#'
#' @return error message if URL cannot be accessed
#' @export
#'
#' @examples
#' pingUrl("https://www.google.com/") ## Works, no error
#' pingUrl("https://www.goooogle.com/") ## Will not work, results in error
#'
pingUrl <- function(url){
## Check URL
url.ping <- tryCatch(
httr::GET(url),
error = function(e){e})
## Return error if class of 'url.ping' is error or if status_code 400:504
if(any(class(url.ping) == "error") |
url.ping$status_code %in% 400:504) {
error_code <- url.ping$status_code
stop(sprintf("The resource %s cannot be reached. Error code: %s \n
1. Please check your internet connection and/or proxy settings.
2. Check if your URL or query contains any errors.
3. If there are no problems with your internet connection and your query is correct, the server may be temporarily unavailable; in this case please try again later.
4. If the problem persists, please contact the package maintainer as the resource may have moved.", url, error_code))
}
}
test <- getUcdpData("nonstate", "21.1")
test
library(ucdp.api)
library(ucdp.api)
