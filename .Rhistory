## ... Month label
version.df$mon <- as.numeric(stringr::str_extract(version.df$version, "[0-9]{1,}$"))
## ... Add reference date label
version.df$ref_date <- as.Date(sprintf("20%s-%s-1", version.df$yr, version.df$mon))
## Keep only dataset versions up to user-specified end-date
version.df <- version.df[version.df$ref_date < format(date, "%Y-%m-01"),]
## Check which datasets exist and keep only those dataset names
version.df$exists <- sapply(1:nrow(version.df), function(x) {
checkUcdpAvailable(dataset = "gedevents", version = version.df$version[x],
as.vector = TRUE)
})
version.df
## Check which datasets exist and keep only those dataset names
version.df$exists <- lapply(1:nrow(version.df), function(x) {
checkUcdpAvailable(dataset = "gedevents", version = version.df$version[x],
as.vector = FALSE)
})
## Check which datasets exist and keep only those dataset names
version.check.df <- lapply(1:nrow(version.df), function(x) {
checkUcdpAvailable(dataset = "gedevents", version = version.df$version[x],
as.vector = FALSE)
})
version.check.df
## Check which datasets exist and keep only those dataset names
version.check.df <- lapply(1:nrow(version.df), function(x) {
checkUcdpAvailable(dataset = "gedevents", version = version.df$version[x],
as.vector = FALSE)
}) |>
dplyr::bind_rows()
version.check.df
if(all(version.check.df$exists == FALSE)){
stop("error")
}
msg(glue::glue("Request failed with status codes: {paste(sort(unique(version.check.df$status)), collapse = ',')}"))
msg <- glue::glue("Request failed with status codes: {paste(sort(unique(version.check.df$status)), collapse = ',')}")
stop(msg)
version.check.df$exists
## Define yearly UCDP GED data version numbers:
## Yearly updates cover 1989 until (excluding) year of the update
## Example: UCDP GED 23.1 covers Jan 1989 to Dec 2022
## ... Extract year from current date
date <- as.Date(date)
yr <- as.numeric(format(date, "%y"))
mon <- as.numeric(format(date, "%m"))
## ... Also include previous yearly data in case current year version has
## ... Not been released yet (released around June/July)
prev.yr <- yr - 1
yrs <- c(yr, prev.yr)
## ... Construct yearly version numbers
yr.versions <- sprintf("%s.1", yrs)
names(yr.versions) <- rep("yearly", length(yr.versions))
## Define monthly version numbers.
m.versions <- unlist(lapply(yrs, function(x){sprintf("%s.0.%s", x, 1:12)}))
names(m.versions) <- rep("monthly", length(m.versions))
## Define quarterly version numbers
## NOTE: Normally the quarterly releases would end with months 3, 6, 9 and 12,
## But UCDP's quarterly release schedule is not 100% consistent so we have to
## consider all months
q.versions <- unlist(lapply(yrs, function(x){sprintf("%s.01.%s.%s", x, x,
## ... Add leading zero
sprintf("%02d", 1:12))}))
names(q.versions) <- rep("quarterly", length(q.versions))
## Combine all version names into single vector and data.frame
version.vec <- c(yr.versions, q.versions, m.versions)
version.df <- data.frame(update = names(version.vec),
version = unname(version.vec))
## Code additional variables
## ... Year label
version.df$yr <- as.numeric(substr(version.df$version, 1,2))
## ... Month label
version.df$mon <- as.numeric(stringr::str_extract(version.df$version, "[0-9]{1,}$"))
## ... Add reference date label
version.df$ref_date <- as.Date(sprintf("20%s-%s-1", version.df$yr, version.df$mon))
## Keep only dataset versions up to user-specified end-date
version.df <- version.df[version.df$ref_date < format(date, "%Y-%m-01"),]
## Check which datasets exist and keep only those dataset names
version.check.df <- lapply(1:nrow(version.df), function(x) {
checkUcdpAvailable(dataset = "gedevents", version = version.df$version[x],
as.vector = FALSE)
}) |>
dplyr::bind_rows()
if(all(version.check.df$exists == FALSE)){
msg <- glue::glue("Request failed with status codes: {paste(sort(unique(version.check.df$status)), collapse = ',')}")
stop(msg)
} else {
## ... Keep only existing datasets
keep.version.df <- version.check.df[version.check.df$exists == TRUE,]
## ... Add "final" vs "candidate" label
keep.version.df$type <- ifelse(grepl("yearly", keep.version.df$update), "final", "candidate")
## ... Add dataset name label
keep.version.df$dataset <- "gedevents"
## ... Keep only latest yearly update
keep.yr.df <- subset(keep.version.df, update == "yearly")
keep.yr.df <- subset(keep.yr.df, yr == max(yr))
## Keep only required quarterly update (i.e. after latest yearly update)
keep.q.df <- subset(keep.version.df, update == "quarterly")
keep.q.df <- subset(keep.q.df, yr == max(yr))
keep.q.df <- subset(keep.q.df, mon == max(mon))
keep.q.df <- subset(keep.q.df, yr >= keep.yr.df$yr)
## Keep only latest monthly update (after latest yearly and quarterly updates)
keep.m.df <- subset(version.df, update == "monthly")
keep.m.df <- subset(keep.m.df, yr >= keep.yr.df$yr)
## If there is a quarterly update, keep only subsequent monthly updates
## Example: Quarterly update covers Jan-Mar, keep only Apr, May, etc
if(nrow(keep.q.df) > 0){
keep.m.df <- subset(keep.m.df, ref_date > keep.q.df$ref_date)
}
## Compile final UCDP GED version ids
version.out.df <- unique(rbind(keep.yr.df, keep.q.df, keep.m.df))
version.out.df <- version.df[,c("dataset", "type", "update", "version", "exists")]
}
version.check.df
version.check.df[version.check.df$exists == TRUE,]
keep.version.df <- version.check.df[version.check.df$exists == TRUE,]
## ... Add "final" vs "candidate" label
keep.version.df$type <- ifelse(grepl("yearly", keep.version.df$update), "final", "candidate")
keep.version.df$update
keep.version.df
## Define yearly UCDP GED data version numbers:
## Yearly updates cover 1989 until (excluding) year of the update
## Example: UCDP GED 23.1 covers Jan 1989 to Dec 2022
## ... Extract year from current date
date <- as.Date(date)
yr <- as.numeric(format(date, "%y"))
mon <- as.numeric(format(date, "%m"))
## ... Also include previous yearly data in case current year version has
## ... Not been released yet (released around June/July)
prev.yr <- yr - 1
yrs <- c(yr, prev.yr)
## ... Construct yearly version numbers
yr.versions <- sprintf("%s.1", yrs)
names(yr.versions) <- rep("yearly", length(yr.versions))
## Define monthly version numbers.
m.versions <- unlist(lapply(yrs, function(x){sprintf("%s.0.%s", x, 1:12)}))
names(m.versions) <- rep("monthly", length(m.versions))
## Define quarterly version numbers
## NOTE: Normally the quarterly releases would end with months 3, 6, 9 and 12,
## But UCDP's quarterly release schedule is not 100% consistent so we have to
## consider all months
q.versions <- unlist(lapply(yrs, function(x){sprintf("%s.01.%s.%s", x, x,
## ... Add leading zero
sprintf("%02d", 1:12))}))
names(q.versions) <- rep("quarterly", length(q.versions))
## Combine all version names into single vector and data.frame
version.vec <- c(yr.versions, q.versions, m.versions)
version.df <- data.frame(update = names(version.vec),
version = unname(version.vec))
version.df
## Code additional variables
## ... Year label
version.df$yr <- as.numeric(substr(version.df$version, 1,2))
## ... Month label
version.df$mon <- as.numeric(stringr::str_extract(version.df$version, "[0-9]{1,}$"))
## ... Add reference date label
version.df$ref_date <- as.Date(sprintf("20%s-%s-1", version.df$yr, version.df$mon))
## Keep only dataset versions up to user-specified end-date
version.df <- version.df[version.df$ref_date < format(date, "%Y-%m-01"),]
## Check which datasets exist and keep only those dataset names
version.check.df <- lapply(1:nrow(version.df), function(x) {
checkUcdpAvailable(dataset = "gedevents", version = version.df$version[x],
as.vector = FALSE)
}) |>
dplyr::bind_rows()
version.check.df
version.df
version.check.df
version.df |>
dplyr::left_join(version.check.df, by = "version")
merge(version.df, version.check.df, "version")
## Define yearly UCDP GED data version numbers:
## Yearly updates cover 1989 until (excluding) year of the update
## Example: UCDP GED 23.1 covers Jan 1989 to Dec 2022
## ... Extract year from current date
date <- as.Date(date)
yr <- as.numeric(format(date, "%y"))
mon <- as.numeric(format(date, "%m"))
## ... Also include previous yearly data in case current year version has
## ... Not been released yet (released around June/July)
prev.yr <- yr - 1
yrs <- c(yr, prev.yr)
## ... Construct yearly version numbers
yr.versions <- sprintf("%s.1", yrs)
names(yr.versions) <- rep("yearly", length(yr.versions))
## Define monthly version numbers.
m.versions <- unlist(lapply(yrs, function(x){sprintf("%s.0.%s", x, 1:12)}))
names(m.versions) <- rep("monthly", length(m.versions))
## Define quarterly version numbers
## NOTE: Normally the quarterly releases would end with months 3, 6, 9 and 12,
## But UCDP's quarterly release schedule is not 100% consistent so we have to
## consider all months
q.versions <- unlist(lapply(yrs, function(x){sprintf("%s.01.%s.%s", x, x,
## ... Add leading zero
sprintf("%02d", 1:12))}))
names(q.versions) <- rep("quarterly", length(q.versions))
## Combine all version names into single vector and data.frame
version.vec <- c(yr.versions, q.versions, m.versions)
version.df <- data.frame(update = names(version.vec),
version = unname(version.vec))
## Code additional variables
## ... Year label
version.df$yr <- as.numeric(substr(version.df$version, 1,2))
## ... Month label
version.df$mon <- as.numeric(stringr::str_extract(version.df$version, "[0-9]{1,}$"))
## ... Add reference date label
version.df$ref_date <- as.Date(sprintf("20%s-%s-1", version.df$yr, version.df$mon))
## Keep only dataset versions up to user-specified end-date
version.df <- version.df[version.df$ref_date < format(date, "%Y-%m-01"),]
version.df
## Check which datasets exist and keep only those dataset names
version.check.df <- lapply(1:nrow(version.df), function(x) {
checkUcdpAvailable(dataset = "gedevents", version = version.df$version[x],
as.vector = FALSE)
}) |>
dplyr::bind_rows()
if(all(version.check.df$exists == FALSE)){
msg <- glue::glue("Request failed with status codes: {paste(sort(unique(version.check.df$status)), collapse = ',')}")
stop(msg)
} else {
## ... Keep only existing datasets
keep.version.df <- merge(version.df, version.check.df, "version")
keep.version.df <- keep.version.df[keep.version.df$exists == TRUE,]
## ... Add "final" vs "candidate" label
keep.version.df$type <- ifelse(grepl("yearly", keep.version.df$update), "final", "candidate")
## ... Add dataset name label
keep.version.df$dataset <- "gedevents"
## ... Keep only latest yearly update
keep.yr.df <- subset(keep.version.df, update == "yearly")
keep.yr.df <- subset(keep.yr.df, yr == max(yr))
## Keep only required quarterly update (i.e. after latest yearly update)
keep.q.df <- subset(keep.version.df, update == "quarterly")
keep.q.df <- subset(keep.q.df, yr == max(yr))
keep.q.df <- subset(keep.q.df, mon == max(mon))
keep.q.df <- subset(keep.q.df, yr >= keep.yr.df$yr)
## Keep only latest monthly update (after latest yearly and quarterly updates)
keep.m.df <- subset(version.df, update == "monthly")
keep.m.df <- subset(keep.m.df, yr >= keep.yr.df$yr)
## If there is a quarterly update, keep only subsequent monthly updates
## Example: Quarterly update covers Jan-Mar, keep only Apr, May, etc
if(nrow(keep.q.df) > 0){
keep.m.df <- subset(keep.m.df, ref_date > keep.q.df$ref_date)
}
## Compile final UCDP GED version ids
version.out.df <- unique(rbind(keep.yr.df, keep.q.df, keep.m.df))
version.out.df <- version.df[,c("dataset", "type", "update", "version", "exists")]
return(version.df)
}
## ... Keep only existing datasets
keep.version.df <- merge(version.df, version.check.df, "version")
keep.version.df <- keep.version.df[keep.version.df$exists == TRUE,]
## ... Add "final" vs "candidate" label
keep.version.df$type <- ifelse(grepl("yearly", keep.version.df$update), "final", "candidate")
## ... Add dataset name label
keep.version.df$dataset <- "gedevents"
## ... Keep only latest yearly update
keep.yr.df <- subset(keep.version.df, update == "yearly")
keep.yr.df <- subset(keep.yr.df, yr == max(yr))
## Keep only required quarterly update (i.e. after latest yearly update)
keep.q.df <- subset(keep.version.df, update == "quarterly")
keep.q.df <- subset(keep.q.df, yr == max(yr))
keep.q.df <- subset(keep.q.df, mon == max(mon))
keep.q.df <- subset(keep.q.df, yr >= keep.yr.df$yr)
## Keep only latest monthly update (after latest yearly and quarterly updates)
keep.m.df <- subset(version.df, update == "monthly")
keep.m.df <- subset(keep.m.df, yr >= keep.yr.df$yr)
## If there is a quarterly update, keep only subsequent monthly updates
## Example: Quarterly update covers Jan-Mar, keep only Apr, May, etc
if(nrow(keep.q.df) > 0){
keep.m.df <- subset(keep.m.df, ref_date > keep.q.df$ref_date)
}
keep.m.df
keep.yr.df
keep.q.df
keep.m.df
## Keep only latest monthly update (after latest yearly and quarterly updates)
keep.m.df <- subset(keep.version.df, update == "monthly")
keep.m.df <- subset(keep.m.df, yr >= keep.yr.df$yr)
## If there is a quarterly update, keep only subsequent monthly updates
## Example: Quarterly update covers Jan-Mar, keep only Apr, May, etc
if(nrow(keep.q.df) > 0){
keep.m.df <- subset(keep.m.df, ref_date > keep.q.df$ref_date)
}
## Compile final UCDP GED version ids
version.out.df <- unique(rbind(keep.yr.df, keep.q.df, keep.m.df))
version.out.df
version.out.df <- version.df[,c("dataset", "type", "update", "version", "exists")]
version.out.df <- keep.version.df[,c("dataset", "type", "update", "version", "exists")]
date = Sys.Date()
date <- as.Date(date)
yr <- as.numeric(format(date, "%y"))
mon <- as.numeric(format(date, "%m"))
yrs <- c(yr, yr - 1)
createVersions <- function(yrs, type) {
if (type == "yearly") {
return(setNames(sprintf("%s.1", yrs), rep("yearly", length(yrs))))
} else if (type == "monthly") {
out <- character()
for (y in yrs) {
out <- c(out, sprintf("%s.0.%s", y, 1:12))
}
return(setNames(out, rep("monthly", length(out))))
} else if (type == "quarterly") {
out <- character()
for (y in yrs) {
out <- c(out, sprintf("%s.01.%s.%s", y, y, sprintf("%02d", 1:12)))
}
return(setNames(out, rep("quarterly", length(out))))
} else {
stop("Unsupported version type.")
}
}
version.vec <- c(
createVersions(yrs, "yearly"),
createVersions(yrs, "quarterly"),
createVersions(yrs, "monthly")
)
version.vec
version.df <- data.frame(
update = names(version.vec),
version = unname(version.vec),
stringsAsFactors = FALSE
)
version.df$yr <- as.numeric(substr(version.df$version, 1, 2))
version.df$mon <- as.numeric(sub(".*\\.", "", version.df$version))
version.df$ref_date <- as.Date(sprintf("20%02d-%02d-01", version.df$yr, version.df$mon))
version.df <- version.df[version.df$ref_date < as.Date(format(date, "%Y-%m-01")), ]
version.check.df <- do.call(rbind, lapply(version.df$version, function(v) {
return(checkUcdpAvailable("gedevents", v, as.vector = FALSE))
}))
version.check.df
if (all(version.check.df$exists == FALSE)) {
msg <- sprintf(
"Request failed with status codes: %s",
paste(sort(unique(version.check.df$status)), collapse = ", ")
)
stop(msg)
}
keep.version.df <- merge(version.df, version.check.df, by = "version")
keep.version.df <- keep.version.df[keep.version.df$exists == TRUE, ]
keep.version.df$type <- ifelse(keep.version.df$update == "yearly", "final", "candidate")
keep.version.df$dataset <- "gedevents"
keep.yr.df <- keep.version.df[keep.version.df$update == "yearly" &
keep.version.df$yr == max(keep.version.df$yr), ]
keep.q.df <- keep.version.df[keep.version.df$update == "quarterly" &
keep.version.df$yr == max(keep.version.df$yr), ]
if (nrow(keep.q.df) > 0) {
keep.q.df <- keep.q.df[keep.q.df$mon == max(keep.q.df$mon), ]
}
keep.m.df <- keep.version.df[keep.version.df$update == "monthly" &
keep.version.df$yr >= max(keep.version.df$yr), ]
if (nrow(keep.q.df) > 0) {
keep.m.df <- keep.m.df[keep.m.df$ref_date > max(keep.q.df$ref_date), ]
}
version.out.df <- unique(rbind(keep.yr.df, keep.q.df, keep.m.df))
version.out.df
## Function to create GED version names according to UCDP naming convention
getVersionNames <- function(yrs, type) {
if (type == "yearly") {
## ... Yearly dataset versions
v.name <- setNames(sprintf("%s.1", yrs), rep("yearly", length(yrs)))
} else if (type == "monthly") {
## ... Monthly dataset versions
out <- character()
for (y in yrs) {
out <- c(out, sprintf("%s.0.%s", y, 1:12))
}
v.name <- setNames(out, rep("monthly", length(out)))
} else if (type == "quarterly") {
## ... Quarterly dataset versions
out <- character()
for (y in yrs) {
out <- c(out, sprintf("%s.01.%s.%s", y, y, sprintf("%02d", 1:12)))
}
v.name <- setNames(out, rep("quarterly", length(out)))
} else {
stop("Unsupported version type.")
}
return(v.name)
}
version.vec <- c(
getVersionNames(yrs, "yearly"),
getVersionNames(yrs, "quarterly"),
getVersionNames(yrs, "monthly")
)
version.vec
as.numeric(substr(version.df$version, 1, 2))
version.df$yr <- as.numeric(substr(version.df$version, 1, 2))
version.df$mon <- as.numeric(sub(".*\\.", "", version.df$version))
as.Date(sprintf("20%02d-%02d-01", version.df$yr, version.df$mon))
version.df[version.df$ref_date < as.Date(format(date, "%Y-%m-01")), ]
version.df[version.df$ref_date < as.Date(format(date, "%Y-%m-01")), ]
version.df[version.df$ref_date < as.Date(format(date, "%Y-%m-01")), ]
version.df <- version.df[version.df$ref_date < as.Date(format(date, "%Y-%m-01")), ]
## Extract year and month from date
date <- as.Date(date)
yr <- as.numeric(format(date, "%y"))
mon <- as.numeric(format(date, "%m"))
yrs <- c(yr, yr - 1)
## Function to create GED version names according to UCDP naming convention
getVersionNames <- function(yrs, type) {
if (type == "yearly") {
## ... Yearly dataset versions
v.name <- setNames(sprintf("%s.1", yrs), rep("yearly", length(yrs)))
} else if (type == "monthly") {
## ... Monthly dataset versions
out <- character()
for (y in yrs) {
out <- c(out, sprintf("%s.0.%s", y, 1:12))
}
v.name <- setNames(out, rep("monthly", length(out)))
} else if (type == "quarterly") {
## ... Quarterly dataset versions
out <- character()
for (y in yrs) {
out <- c(out, sprintf("%s.01.%s.%s", y, y, sprintf("%02d", 1:12)))
}
v.name <- setNames(out, rep("quarterly", length(out)))
} else {
stop("Unsupported version type.")
}
return(v.name)
}
## Get vector of all possible yearly, monthly, quarterly version names for the
## current and previous year (defined by 'date')
version.vec <- c(
getVersionNames(yrs, "yearly"),
getVersionNames(yrs, "quarterly"),
getVersionNames(yrs, "monthly")
)
version.vec
## Exclude future datasets: Reference date greater than current date
version.df <- version.df[version.df$ref_date < as.Date(format(date, "%Y-%m-01")), ]
## Compile in data.frame
version.df <- data.frame(
update = names(version.vec),
version = unname(version.vec),
stringsAsFactors = FALSE
)
version.df
## Add dataset year, month, and reference date
version.df$yr <- as.numeric(substr(version.df$version, 1, 2))
version.df$mon <- as.numeric(sub(".*\\.", "", version.df$version))
version.df$ref_date <- as.Date(sprintf("20%02d-%02d-01", version.df$yr, version.df$mon))
## Exclude future datasets: Reference date greater than current date
version.df <- version.df[version.df$ref_date < as.Date(format(date, "%Y-%m-01")), ]
version.df
## For remaining datasets, ping API to see if they exist
version.check.df <- do.call(rbind, lapply(version.df$version, function(v) {
return(checkUcdpAvailable("gedevents", v, as.vector = FALSE))
}))
version.check.df
version.check.df
version.check.df$status
all(version.check.df$status != 200)
version.check.df$status <- 1
all(version.check.df$status != 200)
## For remaining datasets, ping API to see if they exist
version.check.df <- do.call(rbind, lapply(version.df$version, function(v) {
return(checkUcdpAvailable("gedevents", v, as.vector = FALSE))
}))
# Re-document functions
devtools::document()    # or roxygen2::roxygenise()
devtools::load_all()
rm(list = ls())
# Re-document functions
devtools::document()    # or roxygen2::roxygenise()
install.packages("pkgload")
install.packages("pkgload")
# Re-document functions
devtools::document()    # or roxygen2::roxygenise()
install.packages("pkgload")
install.packages("pkgload")
# Re-document functions
devtools::document()    # or roxygen2::roxygenise()
# Run checks
devtools::check()       # Full package check (like R CMD check)
# Optional but recommended
devtools::test()        # If you use testthat
# Optional but recommended
devtools::test()        # If you use testthat
usethis::use_testthat()
# Optional but recommended
devtools::test()        # If you use testthat
# Optional but recommended
devtools::test()        # If you use testthat
# Run checks
devtools::check()       # Full package check (like R CMD check)
# Run checks
devtools::check()       # Full package check (like R CMD check)
usethis::use_mit_license("Guy Schvitz")
# Run checks
devtools::check()       # Full package check (like R CMD check)
# Run checks
devtools::check()       # Full package check (like R CMD check)
# Run checks
devtools::check()       # Full package check (like R CMD check)
## m.ids <- 1:12
gedc.m.check.df <- do.call(rbind, lapply(m.ids, function(x){
checkUcdpAvailable("gedevents", sprintf("22.0.%s", x))
}))
m.ids <- 1:12
gedc.m.check.df <- do.call(rbind, lapply(m.ids, function(x){
checkUcdpAvailable("gedevents", sprintf("22.0.%s", x))
}))
gedc.m.check.df
# Run checks
devtools::check()       # Full package check (like R CMD check)
# Run checks
devtools::check()       # Full package check (like R CMD check)
# Run checks
devtools::check()       # Full package check (like R CMD check)
# Run checks
devtools::check()       # Full package check (like R CMD check)
